// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/luxun9527/gex/app/admin/api/internal/dao/admin/model"
)

func newSymbol(db *gorm.DB, opts ...gen.DOOption) symbol {
	_symbol := symbol{}

	_symbol.symbolDo.UseDB(db, opts...)
	_symbol.symbolDo.UseModel(&model.Symbol{})

	tableName := _symbol.symbolDo.TableName()
	_symbol.ALL = field.NewAsterisk(tableName)
	_symbol.ID = field.NewUint32(tableName, "id")
	_symbol.SymbolName = field.NewString(tableName, "symbol_name")
	_symbol.SymbolID = field.NewInt32(tableName, "symbol_id")
	_symbol.BaseCoinID = field.NewUint32(tableName, "base_coin_id")
	_symbol.BaseCoinName = field.NewString(tableName, "base_coin_name")
	_symbol.BaseCoinPrec = field.NewInt32(tableName, "base_coin_prec")
	_symbol.QuoteCoinID = field.NewUint32(tableName, "quote_coin_id")
	_symbol.QuoteCoinName = field.NewString(tableName, "quote_coin_name")
	_symbol.QuoteCoinPrec = field.NewInt32(tableName, "quote_coin_prec")
	_symbol.CreatedAt = field.NewUint32(tableName, "created_at")
	_symbol.UpdatedAt = field.NewUint32(tableName, "updated_at")
	_symbol.DeletedAt = field.NewUint32(tableName, "deleted_at")

	_symbol.fillFieldMap()

	return _symbol
}

type symbol struct {
	symbolDo symbolDo

	ALL           field.Asterisk
	ID            field.Uint32
	SymbolName    field.String // 交易对名称
	SymbolID      field.Int32  // 交易对id
	BaseCoinID    field.Uint32 // 基础币ID
	BaseCoinName  field.String // 基础币名称
	BaseCoinPrec  field.Int32  // 基础币精度
	QuoteCoinID   field.Uint32 // 计价币ID
	QuoteCoinName field.String // 计价币名称
	QuoteCoinPrec field.Int32  // 计价币精度
	CreatedAt     field.Uint32 // 创建时间
	UpdatedAt     field.Uint32 // 修改时间
	DeletedAt     field.Uint32 // 删除时间

	fieldMap map[string]field.Expr
}

func (s symbol) Table(newTableName string) *symbol {
	s.symbolDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s symbol) As(alias string) *symbol {
	s.symbolDo.DO = *(s.symbolDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *symbol) updateTableName(table string) *symbol {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint32(table, "id")
	s.SymbolName = field.NewString(table, "symbol_name")
	s.SymbolID = field.NewInt32(table, "symbol_id")
	s.BaseCoinID = field.NewUint32(table, "base_coin_id")
	s.BaseCoinName = field.NewString(table, "base_coin_name")
	s.BaseCoinPrec = field.NewInt32(table, "base_coin_prec")
	s.QuoteCoinID = field.NewUint32(table, "quote_coin_id")
	s.QuoteCoinName = field.NewString(table, "quote_coin_name")
	s.QuoteCoinPrec = field.NewInt32(table, "quote_coin_prec")
	s.CreatedAt = field.NewUint32(table, "created_at")
	s.UpdatedAt = field.NewUint32(table, "updated_at")
	s.DeletedAt = field.NewUint32(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *symbol) WithContext(ctx context.Context) *symbolDo { return s.symbolDo.WithContext(ctx) }

func (s symbol) TableName() string { return s.symbolDo.TableName() }

func (s symbol) Alias() string { return s.symbolDo.Alias() }

func (s symbol) Columns(cols ...field.Expr) gen.Columns { return s.symbolDo.Columns(cols...) }

func (s *symbol) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *symbol) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["id"] = s.ID
	s.fieldMap["symbol_name"] = s.SymbolName
	s.fieldMap["symbol_id"] = s.SymbolID
	s.fieldMap["base_coin_id"] = s.BaseCoinID
	s.fieldMap["base_coin_name"] = s.BaseCoinName
	s.fieldMap["base_coin_prec"] = s.BaseCoinPrec
	s.fieldMap["quote_coin_id"] = s.QuoteCoinID
	s.fieldMap["quote_coin_name"] = s.QuoteCoinName
	s.fieldMap["quote_coin_prec"] = s.QuoteCoinPrec
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s symbol) clone(db *gorm.DB) symbol {
	s.symbolDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s symbol) replaceDB(db *gorm.DB) symbol {
	s.symbolDo.ReplaceDB(db)
	return s
}

type symbolDo struct{ gen.DO }

func (s symbolDo) Debug() *symbolDo {
	return s.withDO(s.DO.Debug())
}

func (s symbolDo) WithContext(ctx context.Context) *symbolDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s symbolDo) ReadDB() *symbolDo {
	return s.Clauses(dbresolver.Read)
}

func (s symbolDo) WriteDB() *symbolDo {
	return s.Clauses(dbresolver.Write)
}

func (s symbolDo) Session(config *gorm.Session) *symbolDo {
	return s.withDO(s.DO.Session(config))
}

func (s symbolDo) Clauses(conds ...clause.Expression) *symbolDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s symbolDo) Returning(value interface{}, columns ...string) *symbolDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s symbolDo) Not(conds ...gen.Condition) *symbolDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s symbolDo) Or(conds ...gen.Condition) *symbolDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s symbolDo) Select(conds ...field.Expr) *symbolDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s symbolDo) Where(conds ...gen.Condition) *symbolDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s symbolDo) Order(conds ...field.Expr) *symbolDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s symbolDo) Distinct(cols ...field.Expr) *symbolDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s symbolDo) Omit(cols ...field.Expr) *symbolDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s symbolDo) Join(table schema.Tabler, on ...field.Expr) *symbolDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s symbolDo) LeftJoin(table schema.Tabler, on ...field.Expr) *symbolDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s symbolDo) RightJoin(table schema.Tabler, on ...field.Expr) *symbolDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s symbolDo) Group(cols ...field.Expr) *symbolDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s symbolDo) Having(conds ...gen.Condition) *symbolDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s symbolDo) Limit(limit int) *symbolDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s symbolDo) Offset(offset int) *symbolDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s symbolDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *symbolDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s symbolDo) Unscoped() *symbolDo {
	return s.withDO(s.DO.Unscoped())
}

func (s symbolDo) Create(values ...*model.Symbol) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s symbolDo) CreateInBatches(values []*model.Symbol, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s symbolDo) Save(values ...*model.Symbol) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s symbolDo) First() (*model.Symbol, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Symbol), nil
	}
}

func (s symbolDo) Take() (*model.Symbol, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Symbol), nil
	}
}

func (s symbolDo) Last() (*model.Symbol, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Symbol), nil
	}
}

func (s symbolDo) Find() ([]*model.Symbol, error) {
	result, err := s.DO.Find()
	return result.([]*model.Symbol), err
}

func (s symbolDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Symbol, err error) {
	buf := make([]*model.Symbol, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s symbolDo) FindInBatches(result *[]*model.Symbol, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s symbolDo) Attrs(attrs ...field.AssignExpr) *symbolDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s symbolDo) Assign(attrs ...field.AssignExpr) *symbolDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s symbolDo) Joins(fields ...field.RelationField) *symbolDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s symbolDo) Preload(fields ...field.RelationField) *symbolDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s symbolDo) FirstOrInit() (*model.Symbol, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Symbol), nil
	}
}

func (s symbolDo) FirstOrCreate() (*model.Symbol, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Symbol), nil
	}
}

func (s symbolDo) FindByPage(offset int, limit int) (result []*model.Symbol, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s symbolDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s symbolDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s symbolDo) Delete(models ...*model.Symbol) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *symbolDo) withDO(do gen.Dao) *symbolDo {
	s.DO = *do.(*gen.DO)
	return s
}
