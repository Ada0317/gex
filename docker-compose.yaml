version: "3.7"
services:
  pulsar:
    image: apachepulsar/pulsar:2.9.1
    command: bin/pulsar standalone
    container_name: pulsar
    ports:
      - "8080:8080"
      - "6650:6650"
    restart: unless-stopped
    volumes:
      - "./deploy/depend/pulsar/conf/:/pulsar/conf"
      - "./deploy/depend/pulsar/data/:/pulsar/data"
    deploy:
      resources:
        limits:
          cpus: '2.50'
  dashboard:
    image: apachepulsar/pulsar-manager:v0.2.0
    container_name: pulsar_manager
    ports:
      - "9527:9527"
      - "7750:7750"
    depends_on:
      - pulsar
    links:
      - pulsar
    environment:
      SPRING_CONFIGURATION_FILE: /pulsar-manager/pulsar-manager/application.properties
  nginx:
    image: nginx:1.21.1           # 镜像`nginx:1.21.1`
    container_name: nginx               # 容器名为'nginx'
    restart: unless-stopped                                       # 指定容器退出后的重启策略为始终重启，但是不考虑在Docker守护进程启动时就已经停止了的容器
    volumes: # 数据卷挂载路径设置,将本机目录映射到容器目录
      - "./deploy/depend/nginx/conf/nginx.conf:/etc/nginx/nginx.conf"
      - "./deploy/depend/nginx/conf/conf.d/default.conf:/etc/nginx/conf.d/default.conf"
      - "./deploy/depend/nginx/html:/usr/share/nginx/html"
      - "./deploy/depend/nginx/log:/var/log/nginx"
    environment: # 设置环境变量,相当于docker run命令中的-e
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
    ports: # 映射端口
      - "80:80"
  mysql:
    image: mysql:8.0  # 原镜像`mysql:8.0`
    container_name: mysql8                                    # 容器名为'mysql8'
    restart: unless-stopped                                               # 指定容器退出后的重启策略为始终重启，但是不考虑在Docker守护进程启动时就已经停止了的容器
    volumes: # 数据卷挂载路径设置,将本机目录映射到容器目录
      - "./deploy/depend/mysql/conf/my.cnf:/etc/mysql/my.cnf"
      - "./deploy/depend/mysql/data:/var/lib/mysql"
      - "./deploy/depend/mysql/mysql-files:/var/lib/mysql-files"
    environment: # 设置环境变量,相当于docker run命令中的-e
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
      MYSQL_ROOT_PASSWORD: root         # 设置root用户密码
    ports: # 映射端口
      - "3307:3306"
  redis:
    image: redis:7.0.5                    # 镜像'redis:7.0.5'
    container_name: redis                                                             # 容器名为'redis'
    restart: unless-stopped                                                                   # 指定容器退出后的重启策略为始终重启，但是不考虑在Docker守护进程启动时就已经停止了的容器
    command: redis-server /etc/redis/redis.conf   # 启动redis服务并添加密码为：123456,默认不开启redis-aof方式持久化配置
    #    command: redis-server --requirepass 123456 --appendonly yes # 启动redis服务并添加密码为：123456,并开启redis持久化配置
    environment: # 设置环境变量,相当于docker run命令中的-e
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
    volumes: # 数据卷挂载路径设置,将本机目录映射到容器目录
      - "./deploy/depend/redis/data:/data"
      - "./deploy/depend/redis/config/redis.conf:/etc/redis/redis.conf"  # `redis.conf`文件内容`http://download.redis.io/redis-stable/redis.conf`
    ports: # 映射端口
      - "6379:6379"
  etcd:
    image: quay.io/coreos/etcd:v3.5.7                #https://etcd.io/docs/v2.3/docker_guide/
    container_name: etcd
    restart: unless-stopped
    command: /usr/local/bin/etcd --data-dir=/etcd-data --name node1 --listen-client-urls http://0.0.0.0:2379 --advertise-client-urls http://192.168.2.159:2379 --log-level info --logger zap --log-outputs stderr --listen-peer-urls http://0.0.0.0:2380 --initial-advertise-peer-urls http://0.0.0.0:2380  --initial-cluster node1=http://0.0.0.0:2380
    ports: # 映射端口
      - "2379:2379"
      - "2380:2380"
  accountapi:
    build:
      dockerfile: ./deploy/dockerfiles/Dockerfile-accountapi
    image: accountapi:latest
    container_name: accountapi
    restart: unless-stopped
    entrypoint: ["/app/accountapi","-f","/app/account.yaml"]
    ports: # 映射端口
      - "20014:20014"
    depends_on:
      - etcd
      - accountrpc
  accountrpc:
    build:
      dockerfile: ./deploy/dockerfiles/Dockerfile-accountrpc
    container_name: accountrpc
    restart: unless-stopped
    entrypoint: ["/app/accountrpc","-f","/app/account.yaml"]
    ports: # 映射端口
      - "20002:20002"
    depends_on:
      - pulsar
      - mysql
      - etcd
  matchmq:
    build:
      dockerfile: ./deploy/dockerfiles/Dockerfile-matchmq
    container_name: matchmq
    restart: unless-stopped
    entrypoint: ["/app/matchmq","-f","/app/match.yaml"]
    depends_on:
      - pulsar
      - mysql
      - redis
  matchrpc:
    build:
      dockerfile: ./deploy/dockerfiles/Dockerfile-matchrpc
    container_name: matchrpc
    restart: unless-stopped
    entrypoint: ["/app/matchrpc","-f","/app/match.yaml"]
    ports: # 映射端口
      - "20003:20003"
    depends_on:
      - etcd
      - pulsar
      - orderrpc
  adminapi:
    build:
      dockerfile: ./deploy/dockerfiles/Dockerfile-adminapi
    container_name: adminapi
    restart: unless-stopped
    entrypoint: ["/app/adminapi","-f","/app/admin.yaml"]
    ports: # 映射端口
      - "20015:20015"
    depends_on:
      - etcd
  orderapi:
    build:
      dockerfile: ./deploy/dockerfiles/Dockerfile-orderapi
    container_name: orderapi
    restart: unless-stopped
    entrypoint: ["/app/orderapi","-f","/app/order.yaml"]
    ports: # 映射端口
      - "20013:20013"
    depends_on:
      - etcd
      - orderrpc
  orderrpc:
    build:
      dockerfile: ./deploy/dockerfiles/Dockerfile-orderrpc
    container_name: orderrpc
    restart: unless-stopped
    entrypoint: ["/app/orderrpc","-f","/app/order.yaml"]
    depends_on:
      - mysql
      - pulsar
      - etcd
    ports: # 映射端口
      - "20001:20001"
  quoteapi:
    build:
      dockerfile: ./deploy/dockerfiles/Dockerfile-quoteapi
    container_name: quoteapi
    restart: unless-stopped
    entrypoint: ["/app/quoteapi","-f","/app/quote.yaml"]
    ports: # 映射端口
      - "20011:20011"
    depends_on:
      - etcd
  klinerpc:
    build:
      dockerfile: ./deploy/dockerfiles/Dockerfile-klinerpc
    container_name: klinerpc
    restart: unless-stopped
    entrypoint: ["/app/klinerpc","-f","/app/kline.yaml"]
    ports: # 映射端口
      - "20009:20009"
    depends_on:
      - etcd
      - mysql
      - pulsar